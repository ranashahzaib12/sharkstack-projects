# -*- coding: utf-8 -*-
"""writingAssistant.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AARZP4e2FjVqRkq-78HIfraKyuPfl6Up
"""

# !pip install groq python-docx reportlab pdfplumber --quiet

import os
import pdfplumber
import textwrap
from groq import Groq
from google.colab import files
from docx import Document
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from IPython.display import display
import ipywidgets as widgets

GROQ_API_KEY = "gsk_etYE0IDkdm5ancvB37B4C6M1kg8"  # Replace with your key
client = Groq(api_key=GROQ_API_KEY)

def generate_blog(topic):
    prompt = f"Write a short blog post about the topic: '{topic}' in a friendly, helpful, and engaging tone."

    chat_completion = client.chat.completions.create(
        messages=[
            {"role": "system", "content": "You are a helpful blog writer assistant."},
            {"role": "user", "content": prompt}
        ],
        model="llama3-8b-8192",
    )
    return chat_completion.choices[0].message.content


topic_input = widgets.Textarea(
    placeholder='Enter a topic like “Benefits of Meditation”',
    description='Topic:',
    layout=widgets.Layout(width='600px', height='80px')
)

generate_button = widgets.Button(description="Generate Blog", button_style='success')

# Display widgets
display(topic_input, generate_button)

def handle_generate(b):
    topic = topic_input.value.strip()

    if not topic:
        print("⚠️ Please enter a topic to generate content.")
        return

    print("⏳ Generating content...")
    result = generate_blog(topic)

    print("\n\n--- ✍️ Generated Blog ---\n\n")
    print(result)

    # Save to DOCX
    doc = Document()
    for line in result.split('\n'):
        doc.add_paragraph(line)
    doc.save("blog_output.docx")

    # Save to PDF
    pdf = SimpleDocTemplate("blog_output.pdf")
    styles = getSampleStyleSheet()
    story = [Paragraph(textwrap.fill(result, 100), styles["Normal"])]
    pdf.build(story)

    print("\n✅ Blog files generated: `blog_output.docx` and `blog_output.pdf`")
    files.download("blog_output.docx")
    files.download("blog_output.pdf")

# Bind the button click
generate_button.on_click(handle_generate)
