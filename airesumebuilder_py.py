# -*- coding: utf-8 -*-
"""aiResumeBuilder.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AARZP4e2FjVqRkq-78HIfraKyuPfl6Up
"""

# !pip install groq python-docx reportlab pdfplumber --quiet

import os
import pdfplumber
import textwrap
from groq import Groq
from google.colab import files
from docx import Document
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from IPython.display import display
import ipywidgets as widgets

GROQ_API_KEY = "gsk_etYE0IDkdm5VKCu8mTZqWGdvB37B4C6M1kg8"  # Replace with your key
client = Groq(api_key=GROQ_API_KEY)

def generate_resume(prompt):
    chat_completion = client.chat.completions.create(
        messages=[
            {"role": "system", "content": "You are a resume expert and career advisor."},
            {"role": "user", "content": prompt}
        ],
        model="moonshotai/kimi-k2-instruct",
    )
    return chat_completion.choices[0].message.content

# Personal Info 
name_input = widgets.Text(placeholder='Your full name', description='Name:', layout=widgets.Layout(width='600px'))
location_input = widgets.Text(placeholder='City, State', description='Location:', layout=widgets.Layout(width='600px'))
email_input = widgets.Text(placeholder='Email Address', description='Email:', layout=widgets.Layout(width='600px'))
phone_input = widgets.Text(placeholder='Phone Number', description='Phone:', layout=widgets.Layout(width='600px'))
linkedin_input = widgets.Text(placeholder='LinkedIn Profile URL', description='LinkedIn:', layout=widgets.Layout(width='600px'))

# Resume Content 
education_input = widgets.Textarea(placeholder='Your education details...', description='Education:', layout=widgets.Layout(width='600px', height='80px'))
exp_input = widgets.Textarea(placeholder='Describe your experience...', description='Experience:', layout=widgets.Layout(width='600px', height='100px'))
skills_input = widgets.Textarea(placeholder='List your skills...', description='Skills:', layout=widgets.Layout(width='600px', height='80px'))

upload_button = widgets.FileUpload(accept='.pdf', multiple=False)
generate_button = widgets.Button(description="Generate Resume", button_style='success')

# Display Inputs
display(name_input, location_input, email_input, phone_input, linkedin_input,
        education_input, exp_input, skills_input, upload_button, generate_button)


def handle_generate(b):
    user_resume_text = ""

    if upload_button.value:
        for name, file_info in upload_button.value.items():
            with open(name, 'wb') as f:
                f.write(file_info['content'])
            with pdfplumber.open(name) as pdf:
                for page in pdf.pages:
                    user_resume_text += page.extract_text() + "\n"

        prompt = f"""Here is my existing resume content:
        {user_resume_text}
        Improve this resume and make it highly optimized for ATS (Applicant Tracking Systems).
        Return it in structured format with proper sections like Summary, Experience, Skills, Education, etc."""
    else:
        experience = exp_input.value
        skills = skills_input.value
        prompt = f"""
        Create a professional, ATS-friendly resume based on the following:
        Experience: {experience}
        Skills: {skills}
        Return the resume in structured format with headings like Summary, Experience, Skills, and Education.
        """

    result = generate_resume(prompt)
    print("\n\n--- Resume Draft ---\n\n")
    print(result)

    # Save to DOCX
    doc = Document()
    for line in result.split('\n'):
        doc.add_paragraph(line)
    doc.save("resume_output.docx")

    # Save to PDF
    pdf = SimpleDocTemplate("resume_output.pdf")
    styles = getSampleStyleSheet()
    story = [Paragraph(textwrap.fill(result, 100), styles["Normal"])]
    pdf.build(story)

    print("\nâœ… Resume files generated: `resume_output.docx` and `resume_output.pdf`")
    files.download("resume_output.docx")
    files.download("resume_output.pdf")

generate_button.on_click(handle_generate)
